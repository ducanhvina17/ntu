// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
	| ;

Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
	| ;

Declaration = FunctionDeclaration
	| FieldDeclaration
	| TypeDeclaration;

FunctionDeclaration = AccessID TypeName ID LPAREN ParameterList RPAREN LCURLY Statements RCURLY;

FieldDeclaration =  AccessID TypeName ID SEMICOLON;

TypeDeclaration = AccessID TYPE ID EQL STRING_LITERAL SEMICOLON;

AccessID = PUBLIC
	| ;

TypeName = PrimitiveType
	| ArrayType
	| ID;

PrimitiveType = VOID
	| BOOLEAN
	| INT;

ArrayType = ID LBRACKET RBRACKET
	| ArrayType LBRACKET RBRACKET
	| PrimitiveType LBRACKET RBRACKET;

ParameterList = Parameter ParameterA
	| ;

ParameterA = COMMA Parameter ParameterA
	| ;

Parameter = TypeName ID;

Statements = Statement Statements
	| ;

Statement = LocalVarDeclaration
	| BlockStatement
	| IfStatement
	| WhileStatement
	| BreakStatement
	| ReturnStatement
	| ExpressionStatement;

LocalVarDeclaration = TypeName ID SEMICOLON;

BlockStatement = LCURLY Statements RCURLY;

IfStatement = IF LPAREN Expression RPAREN Statement
	| IF LPAREN Expression RPAREN Statement ELSE Statement;

WhileStatement = WHILE LPAREN Expression RPAREN Statement;

BreakStatement = BREAK SEMICOLON;

ReturnStatement = RETURN SEMICOLON
	| RETURN Expression SEMICOLON;

ExpressionStatement = Expression SEMICOLON;

Expression = Assignment
	| RHSExpression;

Assignment = LHSExpression EQL Expression;

LHSExpression = ID LHSExpressionA;

LHSExpressionA = LBRACKET Expression RBRACKET LHSExpressionA
	| ; 

RHSExpression = ArithmeticExpression
	| ArithmeticExpression ComparisonOperator ArithmeticExpression;

ComparisonOperator = EQEQ
	| NEQ
	| LT
	| LEQ
	| GT
	| GEQ;

ArithmeticExpression = Term ArithmeticExpressionA;

ArithmeticExpressionA = AdditiveOperator Term ArithmeticExpressionA
	| ;

AdditiveOperator = PLUS
	| MINUS;

Term = Factor TermA;

TermA = MultiplicativeOperator Factor TermA
	| ;

MultiplicativeOperator = TIMES
	| DIV
	| MOD;

Factor = MINUS Factor
	| PrimaryExpression;

PrimaryExpression = LHSExpression
	| FunctionCall
	| ArrayExpression
	| STRING_LITERAL
	| INT_LITERAL
	| Boolean
	| LPAREN Expression RPAREN;

FunctionCall = ID LPAREN ExpressionListEmpty RPAREN;

ArrayExpression = LBRACKET ExpressionList RBRACKET;

Boolean = TRUE
	| FALSE;

ExpressionListEmpty = ExpressionList
	| ;

ExpressionList = Expression ExpressionListA;

ExpressionListA = COMMA Expression ExpressionListA
	| ;

/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;